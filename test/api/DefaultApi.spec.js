/**
 * PhotoRoom API
 * The power of PhotoRoom, automated.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-help@photorom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PhotoRoomApi);
  }
}(this, function(expect, PhotoRoomApi) {
  'use strict';

  var defaultClient = PhotoRoomApi.ApiClient.instance;
  // Configure API key authorization: x-api-key
  var xApiKey = defaultClient.authentications['x-api-key'];
  xApiKey.apiKey = "X-API-KEY"
  // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
  //x-api-key.apiKeyPrefix['x-api-key'] = "Token"

  var instance;

  beforeEach(function() {
    instance = new PhotoRoomApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('accountDetails', function() {
      it('should call accountDetails successfully', function(done) {
        //uncomment below and update the code to test accountDetails
        // instance.accountDetails(function(error) {
        //  if (error) throw error;
        // expect().to.be();
        // });
        instance.accountDetails({}, function(error, data, response) {
          console.error(error)
          console.log(data)
         if (error) throw error;
        expect().to.be();
        });
        done();
      });
    });
    describe('editImageGet', function() {
      it('should call editImageGet successfully', function(done) {
        //uncomment below and update the code to test editImageGet
        //instance.editImageGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editImagePost', function() {
      it('should call editImagePost successfully', function(done) {
        //uncomment below and update the code to test editImagePost
        //instance.editImagePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('instantBackgroundGet', function() {
      it('should call instantBackgroundGet successfully', function(done) {
        //uncomment below and update the code to test instantBackgroundGet
        //instance.instantBackgroundGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('instantBackgroundPost', function() {
      it('should call instantBackgroundPost successfully', function(done) {
        //uncomment below and update the code to test instantBackgroundPost
        //instance.instantBackgroundPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeBackground', function() {
      it('should call removeBackground successfully', function(done) {
        //uncomment below and update the code to test removeBackground
        //instance.removeBackground(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v2EditGet', function() {
      it('should call v2EditGet successfully', function(done) {
        //uncomment below and update the code to test v2EditGet
        //instance.v2EditGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v2EditPost', function() {
      it('should call v2EditPost successfully', function(done) {
        //uncomment below and update the code to test v2EditPost
        //instance.v2EditPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
