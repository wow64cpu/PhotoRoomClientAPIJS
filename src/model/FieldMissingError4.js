/**
 * PhotoRoom API
 * The power of PhotoRoom, automated.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-help@photorom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldMissingError4Error from './FieldMissingError4Error';

/**
 * The FieldMissingError4 model module.
 * @module model/FieldMissingError4
 * @version 1.0.0
 */
class FieldMissingError4 {
    /**
     * Constructs a new <code>FieldMissingError4</code>.
     * @alias module:model/FieldMissingError4
     * @param error {module:model/FieldMissingError4Error} 
     */
    constructor(error) { 
        
        FieldMissingError4.initialize(this, error);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, error) { 
        obj['error'] = error;
    }

    /**
     * Constructs a <code>FieldMissingError4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldMissingError4} obj Optional instance to populate.
     * @return {module:model/FieldMissingError4} The populated <code>FieldMissingError4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldMissingError4();

            if (data.hasOwnProperty('error')) {
                obj['error'] = FieldMissingError4Error.constructFromObject(data['error']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldMissingError4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldMissingError4</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FieldMissingError4.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          FieldMissingError4Error.validateJSON(data['error']);
        }

        return true;
    }


}

FieldMissingError4.RequiredProperties = ["error"];

/**
 * @member {module:model/FieldMissingError4Error} error
 */
FieldMissingError4.prototype['error'] = undefined;






export default FieldMissingError4;

