/**
 * PhotoRoom API
 * The power of PhotoRoom, automated.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-help@photorom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FieldMissingError model module.
 * @module model/FieldMissingError
 * @version 1.0.0
 */
class FieldMissingError {
    /**
     * Constructs a new <code>FieldMissingError</code>.
     * @alias module:model/FieldMissingError
     * @param detail {String} The details of the error
     * @param statusCode {Number} The status code of the error
     * @param type {String} The type of the error
     */
    constructor(detail, statusCode, type) { 
        
        FieldMissingError.initialize(this, detail, statusCode, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, detail, statusCode, type) { 
        obj['detail'] = detail;
        obj['status_code'] = statusCode;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FieldMissingError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldMissingError} obj Optional instance to populate.
     * @return {module:model/FieldMissingError} The populated <code>FieldMissingError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldMissingError();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('status_code')) {
                obj['status_code'] = ApiClient.convertToType(data['status_code'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldMissingError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldMissingError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FieldMissingError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

FieldMissingError.RequiredProperties = ["detail", "status_code", "type"];

/**
 * The details of the error
 * @member {String} detail
 */
FieldMissingError.prototype['detail'] = undefined;

/**
 * The status code of the error
 * @member {Number} status_code
 */
FieldMissingError.prototype['status_code'] = undefined;

/**
 * The type of the error
 * @member {String} type
 */
FieldMissingError.prototype['type'] = undefined;






export default FieldMissingError;

