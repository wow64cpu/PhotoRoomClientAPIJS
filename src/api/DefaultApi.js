/**
 * PhotoRoom API
 * The power of PhotoRoom, automated.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-help@photorom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountDetails200Response from '../model/AccountDetails200Response';
import EditImageBadRequest from '../model/EditImageBadRequest';
import FieldMissingError from '../model/FieldMissingError';
import FieldMissingError1 from '../model/FieldMissingError1';
import FieldMissingError2 from '../model/FieldMissingError2';
import FieldMissingError3 from '../model/FieldMissingError3';
import FieldMissingError4 from '../model/FieldMissingError4';
import PaymentError from '../model/PaymentError';
import RemoveBackground200Response from '../model/RemoveBackground200Response';
import UnknownError from '../model/UnknownError';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountDetails operation.
     * @callback module:api/DefaultApi~accountDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Details
     * Get current account details, including remaining credits balance and monthly quota
     * @param {module:api/DefaultApi~accountDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountDetails200Response}
     */
    accountDetails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountDetails200Response;
      let basePaths = ['https://beta-sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the editImageGet operation.
     * @callback module:api/DefaultApi~editImageGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [BETA] Edit Image v1
     * Render an image using a template. A detailed tutorial is available [here](https://www.photoroom.com/api/docs/image-editing-api-documentation)
     * @param {String} templateId 
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] 
     * @param {String} [imageUrl] 
     * @param {String} [conceptUrl] 
     * @param {module:api/DefaultApi~editImageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    editImageGet(templateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling editImageGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'apiKey': opts['apiKey'],
        'templateId': templateId,
        'imageUrl': opts['imageUrl'],
        'conceptUrl': opts['conceptUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      let basePaths = ['https://beta-sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/render', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the editImagePost operation.
     * @callback module:api/DefaultApi~editImagePostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [BETA] Edit Image v1
     * Render an image using a template. A detailed tutorial is available [here](https://www.photoroom.com/api/docs/image-editing-api-documentation)
     * @param {String} templateId The ID of the template to render
     * @param {Object} opts Optional parameters
     * @param {File} [imageFile] The image file to render
     * @param {String} [imageUrl] Deprecated, use `imageFile` instead.
     * @param {module:api/DefaultApi~editImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    editImagePost(templateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling editImagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'templateId': templateId,
        'imageFile': opts['imageFile'],
        'imageUrl': opts['imageUrl']
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      let basePaths = ['https://beta-sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/render', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the instantBackgroundGet operation.
     * @callback module:api/DefaultApi~instantBackgroundGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [BETA] Generate Background
     * Generate background for an image given a prompt
     * @param {String} imageUrl 
     * @param {String} prompt 
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] 
     * @param {String} [negativePrompt] 
     * @param {String} [seed] 
     * @param {module:api/DefaultApi~instantBackgroundGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    instantBackgroundGet(imageUrl, prompt, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling instantBackgroundGet");
      }
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling instantBackgroundGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'apiKey': opts['apiKey'],
        'imageUrl': imageUrl,
        'prompt': prompt,
        'negativePrompt': opts['negativePrompt'],
        'seed': opts['seed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      let basePaths = ['https://beta-sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/instant-backgrounds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the instantBackgroundPost operation.
     * @callback module:api/DefaultApi~instantBackgroundPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [BETA] Generate Background
     * Generate background for an image given a prompt
     * @param {String} prompt The prompt to generate the background
     * @param {Object} opts Optional parameters
     * @param {File} [imageFile] The image file to render
     * @param {String} [imageUrl] Deprecated, use `imageFile` instead.
     * @param {String} [negativePrompt] Use it to guide the AI in avoiding these elements during the background generation process
     * @param {String} [seed] Seed used to generate the background. Can be used to get similar looking results for the same prompt
     * @param {module:api/DefaultApi~instantBackgroundPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    instantBackgroundPost(prompt, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling instantBackgroundPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'prompt': prompt,
        'imageFile': opts['imageFile'],
        'imageUrl': opts['imageUrl'],
        'negativePrompt': opts['negativePrompt'],
        'seed': opts['seed']
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      let basePaths = ['https://beta-sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/instant-backgrounds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the removeBackground operation.
     * @callback module:api/DefaultApi~removeBackgroundCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Background
     * Remove background from an image
     * @param {Object} opts Optional parameters
     * @param {File} [imageFile] The image file to render
     * @param {module:model/String} [format = 'png')] The format of the resulting image
     * @param {module:model/String} [channels = 'rgba')] The channels of the resulting image
     * @param {String} [bgColor] The background color of the resulting image. Can be a hex code (`#FF00FF`) or a HTML color (`red`, `green`, etc.)
     * @param {module:model/String} [size = 'full')] Will resize the output to the specified size. Can be `preview` (0.25 Megapixels), `medium` (1.5 MP), `hd` (4 MP) or `full` (36 MP, can be slower for large images). Useful for mobile apps that need smaller images. Setting preview uses 0.25 credit
     * @param {module:model/String} [crop = 'false')] If `true`, the image returned is cropped to the cutout border. Transparent pixels are removed from the border
     * @param {module:api/DefaultApi~removeBackgroundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    removeBackground(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image_file': opts['imageFile'],
        'format': opts['format'],
        'channels': opts['channels'],
        'bg_color': opts['bgColor'],
        'size': opts['size'],
        'crop': opts['crop']
      };

      let authNames = ['x-api-key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      let basePaths = ['https://sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v1/segment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the v2EditGet operation.
     * @callback module:api/DefaultApi~v2EditGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [BETA] Edit Image v2
     * This endpoint processes an image, removing the background if specified, and applies various transformations such as scaling, padding, and margin adjustments. It accepts URL input for the image. The output size, background color or image, and other parameters can be customized.
     * @param {Object} opts Optional parameters
     * @param {String} [backgroundColor = 'transparent')] Color of the background. If omitted, background will be transparent unless `background.imageUrl` or `background.imageFile` is provided. Can be a hex color without the hash sign (example: `FF0000`, `FFF`, `FF0000EE`) or color name (examples: `red`, `blue`)  Can't be provided if `removeBackground` is set to `false`
     * @param {String} [backgroundImageUrl] URL of the image to use as a background. The GET endpoint accepts `background.imageUrl` only. In the POST endpoint, you can specify either `background.imageUrl` or `background.imageFile`, but not both. If `background.imageUrl` is provided, neither `background.imageFile` nor `background.prompt` can be provided, and vice versa.  Can't be provided if `removeBackground` is set to `false`
     * @param {String} [backgroundNegativePrompt] A negative prompt to use for guiding the background generation process; If provided, the generation algorithm will try to avoid properties listed in the negativePrompt.
     * @param {String} [backgroundPrompt] Prompt to use for guiding the background generation process.
     * @param {module:model/String} [backgroundScaling = 'fill')] Whether the background should fit or fill (default) the output image If set to `fit`, the empty pixels will be transparent  Can only be provided if `background.imageUrl` or `background.imageFile` is provided
     * @param {Number} [backgroundSeed] Seed used to generate the background. Can be used to get similar looking results for the same prompt.
     * @param {Boolean} [ignorePaddingAndSnapOnCroppedSides = true)] If set to `true` (default), cropped sides of the subject will snap to the edges For instance, for a portrait image cropped below the elbows, the subject will be aligned at the bottom even if a bottom padding is provided (but it will still respect bottom margin)  Can't be provided if `removeBackground` is set to `false`  (See positioning section of the documentation for more information)
     * @param {String} [imageUrl] URL of the main image used by the API. The GET endpoint accepts `imageUrl` only. In the POST endpoint, you can specify either `imageUrl` or `imageFile`, but not both. If `imageUrl` is provided, `imageFile` can't be provided and vice versa.
     * @param {module:model/String} [lightingMode] Lighting mode to use on the main image used by the API. If set to `ai.auto`, the lighting will be automatically adjusted
     * @param {Number} [margin = 0)] [Advanced] Margin around the subject. Expressed in a ratio of the output image size. Unlike `padding`, margin is never ignored even on cropped sides of the subject. (See positioning section of the documentation for more information)
     * @param {Number} [marginBottom] [Advanced] Bottom Margin, overrides margin argument on the Bottom side if provided
     * @param {Number} [marginLeft] [Advanced] Left Margin, overrides margin argument on the left side
     * @param {Number} [marginRight] [Advanced] Right Margin, overrides margin argument on the right side if provided
     * @param {Number} [marginTop] [Advanced] Top Margin, overrides margin argument on the Top side if provided
     * @param {Number} [maxHeight] Maximum output height. Can only be provided if `outputSize` is `originalImage` or `croppedSubject`. Useful for: redimensioning while keeping the aspect ratio
     * @param {Number} [maxWidth] Maximum output width. Can only be provided if `outputSize` is `originalImage` or `croppedSubject`. Useful for: resizing an image while keeping the aspect ratio
     * @param {String} [outputSize = 'originalImage')] Output size of the image. In the form of either: - `widthxheight` for a custom size (example: `200x400`) - `originalImage` to keep the original image dimensions - `croppedSubject` to use the size of the foreground dimensions after cropping around it
     * @param {Number} [padding = 0)] Padding around the subject. Unlike `margin`, it will be ignored on cropped sides of the subject if the option is enabled Expressed in a ratio of the size of the document, minus margins (similar to CSS) (See positioning section of the documentation for more information)
     * @param {Number} [paddingBottom] Bottom Padding, overrides padding argument on the Bottom side if provided
     * @param {Number} [paddingLeft] Left Padding, overrides padding argument on the left side
     * @param {Number} [paddingRight] Right Padding, overrides padding argument on the right side if provided
     * @param {Number} [paddingTop] Top Padding, overrides padding argument on the Top side if provided
     * @param {module:model/String} [referenceBox = 'subjectBox')] [Advanced] `subjectBox` by default. When set to `originalImage`, the padding / margin will be around the original image and not the cropped subject.  It can lead to the subject disappearing when scaling is set to 'fill', for instance if the subject is on the left of a landscape image and outputSize is a square.  Most use cases don't require this option. It is useful if you'd like to maintain subject positioning in the original image.  Can't be provided if `removeBackground` is set to `false`  (See positioning section of the documentation for more information)
     * @param {Boolean} [removeBackground = true)] If enabled (default), the background of the image will be removed using PhotoRoom's award-winning algorithm
     * @param {module:model/String} [scaling = 'fit')] Whether the subject should fit (default) or fill the output image If set to `fit`, the empty pixels will be transparent  Can only be provided if `imageUrl` or `imageFile` is provided
     * @param {module:model/String} [shadowMode] Shadow generation mode to use on the main image used by the API. If set to `ai.soft`, a soft shadow will be generated If set to `ai.hard`, a hard shadow will be generated If set to `ai.floating`, a floating shadow will be generated
     * @param {module:api/DefaultApi~v2EditGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    v2EditGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'background.color': opts['backgroundColor'],
        'background.imageUrl': opts['backgroundImageUrl'],
        'background.negativePrompt': opts['backgroundNegativePrompt'],
        'background.prompt': opts['backgroundPrompt'],
        'background.scaling': opts['backgroundScaling'],
        'background.seed': opts['backgroundSeed'],
        'ignorePaddingAndSnapOnCroppedSides': opts['ignorePaddingAndSnapOnCroppedSides'],
        'imageUrl': opts['imageUrl'],
        'lighting.mode': opts['lightingMode'],
        'margin': opts['margin'],
        'marginBottom': opts['marginBottom'],
        'marginLeft': opts['marginLeft'],
        'marginRight': opts['marginRight'],
        'marginTop': opts['marginTop'],
        'maxHeight': opts['maxHeight'],
        'maxWidth': opts['maxWidth'],
        'outputSize': opts['outputSize'],
        'padding': opts['padding'],
        'paddingBottom': opts['paddingBottom'],
        'paddingLeft': opts['paddingLeft'],
        'paddingRight': opts['paddingRight'],
        'paddingTop': opts['paddingTop'],
        'referenceBox': opts['referenceBox'],
        'removeBackground': opts['removeBackground'],
        'scaling': opts['scaling'],
        'shadow.mode': opts['shadowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      let basePaths = ['https://beta-sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the v2EditPost operation.
     * @callback module:api/DefaultApi~v2EditPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [BETA] Edit Image v2
     * This endpoint processes an image, removing the background if specified, and applies various transformations such as scaling, padding, and margin adjustments. It accepts binary data for the image. The output size, background color or image, and other parameters can be customized.
     * @param {Object} opts Optional parameters
     * @param {String} [backgroundColor = 'transparent')] Color of the background. If omitted, background will be transparent unless `background.imageUrl` or `background.imageFile` is provided. Can be a hex color without the hash sign (example: `FF0000`, `FFF`, `FF0000EE`) or color name (examples: `red`, `blue`)  Can't be provided if `removeBackground` is set to `false`
     * @param {String} [backgroundImageUrl] URL of the image to use as a background. The GET endpoint accepts `background.imageUrl` only. In the POST endpoint, you can specify either `background.imageUrl` or `background.imageFile`, but not both. If `background.imageUrl` is provided, neither `background.imageFile` nor `background.prompt` can be provided, and vice versa.  Can't be provided if `removeBackground` is set to `false`
     * @param {String} [backgroundNegativePrompt] A negative prompt to use for guiding the background generation process; If provided, the generation algorithm will try to avoid properties listed in the negativePrompt.
     * @param {String} [backgroundPrompt] Prompt to use for guiding the background generation process.
     * @param {module:model/String} [backgroundScaling = 'fill')] Whether the background should fit or fill (default) the output image If set to `fit`, the empty pixels will be transparent  Can only be provided if `background.imageUrl` or `background.imageFile` is provided
     * @param {Number} [backgroundSeed] Seed used to generate the background. Can be used to get similar looking results for the same prompt.
     * @param {Boolean} [ignorePaddingAndSnapOnCroppedSides = true)] If set to `true` (default), cropped sides of the subject will snap to the edges For instance, for a portrait image cropped below the elbows, the subject will be aligned at the bottom even if a bottom padding is provided (but it will still respect bottom margin)  Can't be provided if `removeBackground` is set to `false`  (See positioning section of the documentation for more information)
     * @param {File} [imageFile] Bytes of the main image used by the API. Only available in the POST request  If provided, `imageUrl` can't be provided
     * @param {module:model/String} [lightingMode] Lighting mode to use on the main image used by the API. If set to `ai.auto`, the lighting will be automatically adjusted
     * @param {Number} [margin = 0)] [Advanced] Margin around the subject. Expressed in a ratio of the output image size. Unlike `padding`, margin is never ignored even on cropped sides of the subject. (See positioning section of the documentation for more information)
     * @param {Number} [marginBottom] [Advanced] Bottom Margin, overrides margin argument on the Bottom side if provided
     * @param {Number} [marginLeft] [Advanced] Left Margin, overrides margin argument on the left side
     * @param {Number} [marginRight] [Advanced] Right Margin, overrides margin argument on the right side if provided
     * @param {Number} [marginTop] [Advanced] Top Margin, overrides margin argument on the Top side if provided
     * @param {Number} [maxHeight] Maximum output height. Can only be provided if `outputSize` is `originalImage` or `croppedSubject`. Useful for: redimensioning while keeping the aspect ratio
     * @param {Number} [maxWidth] Maximum output width. Can only be provided if `outputSize` is `originalImage` or `croppedSubject`. Useful for: resizing an image while keeping the aspect ratio
     * @param {String} [outputSize = 'originalImage')] Output size of the image. In the form of either: - `widthxheight` for a custom size (example: `200x400`) - `originalImage` to keep the original image dimensions - `croppedSubject` to use the size of the foreground dimensions after cropping around it
     * @param {Number} [padding = 0)] Padding around the subject. Unlike `margin`, it will be ignored on cropped sides of the subject if the option is enabled Expressed in a ratio of the size of the document, minus margins (similar to CSS) (See positioning section of the documentation for more information)
     * @param {Number} [paddingBottom] Bottom Padding, overrides padding argument on the Bottom side if provided
     * @param {Number} [paddingLeft] Left Padding, overrides padding argument on the left side
     * @param {Number} [paddingRight] Right Padding, overrides padding argument on the right side if provided
     * @param {Number} [paddingTop] Top Padding, overrides padding argument on the Top side if provided
     * @param {module:model/String} [referenceBox = 'subjectBox')] [Advanced] `subjectBox` by default. When set to `originalImage`, the padding / margin will be around the original image and not the cropped subject.  It can lead to the subject disappearing when scaling is set to 'fill', for instance if the subject is on the left of a landscape image and outputSize is a square.  Most use cases don't require this option. It is useful if you'd like to maintain subject positioning in the original image.  Can't be provided if `removeBackground` is set to `false`  (See positioning section of the documentation for more information)
     * @param {Boolean} [removeBackground = true)] If enabled (default), the background of the image will be removed using PhotoRoom's award-winning algorithm
     * @param {module:model/String} [scaling = 'fit')] Whether the subject should fit (default) or fill the output image If set to `fit`, the empty pixels will be transparent  Can only be provided if `imageUrl` or `imageFile` is provided
     * @param {module:model/String} [shadowMode] Shadow generation mode to use on the main image used by the API. If set to `ai.soft`, a soft shadow will be generated If set to `ai.hard`, a hard shadow will be generated If set to `ai.floating`, a floating shadow will be generated
     * @param {module:api/DefaultApi~v2EditPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    v2EditPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'background.color': opts['backgroundColor'],
        'background.imageUrl': opts['backgroundImageUrl'],
        'background.negativePrompt': opts['backgroundNegativePrompt'],
        'background.prompt': opts['backgroundPrompt'],
        'background.scaling': opts['backgroundScaling'],
        'background.seed': opts['backgroundSeed'],
        'ignorePaddingAndSnapOnCroppedSides': opts['ignorePaddingAndSnapOnCroppedSides'],
        'imageFile': opts['imageFile'],
        'lighting.mode': opts['lightingMode'],
        'margin': opts['margin'],
        'marginBottom': opts['marginBottom'],
        'marginLeft': opts['marginLeft'],
        'marginRight': opts['marginRight'],
        'marginTop': opts['marginTop'],
        'maxHeight': opts['maxHeight'],
        'maxWidth': opts['maxWidth'],
        'outputSize': opts['outputSize'],
        'padding': opts['padding'],
        'paddingBottom': opts['paddingBottom'],
        'paddingLeft': opts['paddingLeft'],
        'paddingRight': opts['paddingRight'],
        'paddingTop': opts['paddingTop'],
        'referenceBox': opts['referenceBox'],
        'removeBackground': opts['removeBackground'],
        'scaling': opts['scaling'],
        'shadow.mode': opts['shadowMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      let basePaths = ['https://beta-sdk.photoroom.com'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/v2/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
